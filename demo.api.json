{
	"info": {
		"_postman_id": "c1cb1ca0-0fea-4392-bb96-0a7ca780033c",
		"name": "mycollection1 Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22736333"
	},
	"item": [
		{
			"name": "GETrequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//check status code \r",
							"pm.test(\"Status code is 200\", () => {\r",
							"pm.response.to.have.status(200);});\r",
							"\r",
							"//get request\r",
							"pm.test(\"Successful GET request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201]);});\r",
							"\r",
							"//status code\r",
							"pm.test(\"Status code name has string\",()=>{\r",
							"pm.response.to.have.status(\"OK\");});\r",
							"\r",
							"//header check\r",
							"pm.test(\"Content Type header is present\", () => {\r",
							"pm.response.to.have.header(\"Content-Type\");});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.eql\r",
							"('application/json; charset=utf-8');});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 500ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(500);});\r",
							"\r",
							"\r",
							"//test the type of any part of response\r",
							"pm.test(\"test data type of the response\", ()=> {\r",
							"const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.data[1].first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data[1].last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data[1].email).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data[1].avatar).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"//assert data validations \r",
							"pm.test(\"data is right\",  ()=> {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.eql(2);\r",
							"    pm.expect(jsonData.data[1].email).to.eql(\"janet.weaver@reqres.in\");\r",
							"    pm.expect(jsonData.data[1].first_name).to.eql(\"Janet\");\r",
							"    pm.expect(jsonData.data[1].last_name).to.eql(\"Weaver\");\r",
							"    pm.expect(jsonData.data[1].avatar).to.eql(\"https://reqres.in/img/faces/2-image.jpg\");\r",
							"});\r",
							"\r",
							"//json schema validation\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"page\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"per_page\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"total\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"total_pages\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"support\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"url\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"text\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"url\",\r",
							"        \"text\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"page\",\r",
							"    \"per_page\",\r",
							"    \"total\",\r",
							"    \"total_pages\",\r",
							"    \"data\",\r",
							"    \"support\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('schema is valid',()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTrequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"pm.response.to.have.status(201);});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([201,202]);});\r",
							"\r",
							"pm.test(\"Status code name has string\",()=>{\r",
							"    pm.response.to.have.status(\"Created\");});\r",
							"\r",
							"pm.test(\"Content Type header is present\", () => {\r",
							"pm.response.to.have.header(\"Content-Type\");});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.eql\r",
							"('application/json; charset=utf-8');});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(1000);});\r",
							"\r",
							"//asserting array properties\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"test array properties\", () => {\r",
							"pm.expect(jsonData.courses).to.include(\"java\");\r",
							"pm.expect(jsonData.courses).to.have.members([\"java\",\"python\"]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//test the type of any part of response\r",
							"pm.test(\"test data type of the response\", ()=> {\r",
							"const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.phonenumber).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.location).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"//assert a data \r",
							"pm.test(\"data is right\",  ()=> {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"adarsh\");\r",
							"    pm.expect(jsonData.job).to.eql(\"singh\");\r",
							"    pm.expect(jsonData.phonenumber).to.eql(6265445594);\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"python\");\r",
							"    pm.expect(jsonData.location).to.eql(\"india\");\r",
							"});\r",
							"\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phonenumber\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"createdAt\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\",\r",
							"    \"phonenumber\",\r",
							"    \"courses\",\r",
							"    \"location\",\r",
							"    \"id\",\r",
							"    \"createdAt\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test('schema is valid',()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"adarsh\",\r\n\"job\": \"singh\",\r\n\"phonenumber\":6265445594,\r\n\"courses\":[\"java\",\"python\"],\r\n\"location\":\"india\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCHrequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"pm.response.to.have.status(200);});\r",
							"\r",
							"pm.test(\"Successful GET request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,202]);});\r",
							"\r",
							"pm.test(\"Status code name has string\",()=>{\r",
							"    pm.response.to.have.status(\"OK\");});\r",
							"\r",
							"pm.test(\"Content Type header is present\", () => {\r",
							"pm.response.to.have.header(\"Content-Type\");});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.eql\r",
							"('application/json; charset=utf-8');});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(1000);});\r",
							"\r",
							"//test the type of any part of response\r",
							"pm.test(\"test data type of the response\", ()=> {\r",
							"const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.phonenumber).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.location).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"//assert a data \r",
							"pm.test(\"data is right\",  ()=> {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"adarsh\");\r",
							"    pm.expect(jsonData.job).to.eql(\"singh\");\r",
							"    pm.expect(jsonData.phonenumber).to.eql(8962996789);\r",
							"    pm.expect(jsonData.courses).to.eql(\"java\");\r",
							"    pm.expect(jsonData.location).to.eql(\"india\");\r",
							"});\r",
							"\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phonenumber\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"updatedAt\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\",\r",
							"    \"phonenumber\",\r",
							"    \"courses\",\r",
							"    \"location\",\r",
							"    \"updatedAt\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('schema is valid',()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"adarsh\",\r\n\"job\": \"singh\",\r\n\"phonenumber\":8962996789,\r\n\"courses\":\"java\",\r\n\"location\":\"india\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/930",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"930"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUTrequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"pm.response.to.have.status(200);});\r",
							"\r",
							"pm.test(\"Successful GET request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,202]);});\r",
							"\r",
							"pm.test(\"Status code name has string\",()=>{\r",
							"    pm.response.to.have.status(\"OK\");});\r",
							"\r",
							"pm.test(\"Content Type header is present\", () => {\r",
							"pm.response.to.have.header(\"Content-Type\");});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.eql\r",
							"('application/json; charset=utf-8');});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(1000);});\r",
							"\r",
							"//test the type of any part of response\r",
							"pm.test(\"test data type of the response\", ()=> {\r",
							"const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"//assert a data \r",
							"pm.test(\"data is right\",  ()=> {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"adarsh\");\r",
							"    pm.expect(jsonData.job).to.eql(\"software engineer\");\r",
							"});\r",
							"\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"updatedAt\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\",\r",
							"    \"updatedAt\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('schema is valid',()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"adarsh\",\r\n    \"job\": \"software engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/930",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"930"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELrequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"pm.response.to.have.status(204);});\r",
							"\r",
							"pm.test(\"Successful GET request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([204,202]);});\r",
							"\r",
							"pm.test(\"Status code name has string\",()=>{\r",
							"    pm.response.to.have.status(\"No Content\");});\r",
							"\r",
							"pm.test(\"Content Type header is present\", () => {\r",
							"pm.response.to.have.header(\"Content-Length\");});\r",
							"\r",
							"pm.test(\"Content-Type header is Zero\", () => {\r",
							"pm.expect(pm.response.headers.get('Content-Length')).to.eql\r",
							"154545;});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(1000);});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/223",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"223"
					]
				}
			},
			"response": []
		}
	]
}